# Yard Renovator - Updated Design & Implementation Document

## 1. Overview

**Project Name:** Yard Renovator

**Objective:**  
Develop a secure web application that allows users to upload (or capture on mobile) a picture of their yard or outdoor space and receive a renovated version generated using OpenAI's image generation API. The app will focus on themes related to growing and building, with renovation options that result in realistic, purchasable products from Amazon.

---

## 2. Functional Requirements

1. **User Authentication:**
   - **Secure Sign-In:** Users sign in via Google OAuth 2.0 using a secure server-side implementation.
   - **Session Management:** HTTP-only cookies with CSRF protection.

2. **Image Upload & Capture:**
   - **Upload Options:** Users can upload an image or capture one directly on mobile.
   - **Image Storage:** Only the generated (final) images are stored, while the original uploads are discarded after processing.
   - **File Validation:** Strict validation of uploaded files, including type checking and size limitations.

3. **Renovation Options:**
   - **Theme Selection:** Options include "Keep current theme" and other predefined themes that emphasize growth and building.
   - **Renovation Level:** Choices include:
     - Fix what's broken
     - Slight aesthetic improvement
     - Full redo
   - **Additional Notes:** A text box for users to provide extra details.  
     *Note:* The automatic prompt generation from these inputs is handled behind the scenes; users will not see that a prompt is generated.

4. **Credit System:**
   - **Pricing Tiers:**
     - Single credit: $0.49
     - 3 credits: $1.29
     - 5 credits: $1.99
     - 10 credits: $3.00
   - **Usage:** One credit is consumed per image generation.
   - **Payment Processing:** Initial integration with PayPal for secure payments.
   - **Future Expansion:** Architecture to support additional payment providers.
   - **Credit Balance:** Displayed prominently in the user dashboard.

5. **Prompt Generation & API Integration:**
   - **Hidden Processing:** The app will call the ChatGPT API to automatically synthesize user inputs into a single, coherent prompt.
   - **Image Generation:** This refined prompt is then passed to the OpenAI image generation API with strict guidelines ensuring realistic, purchasable renovation elements.
   - **Realism Requirement:** All products showcased in the output must be available on Amazon.

6. **Affiliate Integration (Amazon):**
   - **Dynamic API Calls:** The system will dynamically query Amazon's affiliate API for product data.
   - **Caching Strategy:** Retrieved affiliate links will be stored in a PostgreSQL database for caching and performance improvement.
   - **Display:** The renovated image will feature clickable product placements that link directly to Amazon.

7. **User History:**
   - **Gallery:** Each user's account maintains a history of generated images along with relevant renovation details.
   - **Credit History:** Track credit purchases and usage over time.
   - **No Collaboration:** Sharing or community features are not included in this version.

8. **User Feedback on Processing:**
   - **Estimated Completion:** Provide users with an estimated processing time for the renovation generation.
   - **Status Updates:** Clear visual indication of processing status.

---

## 3. Non-Functional Requirements

- **Performance:**  
  - Handle up to 10 simultaneous requests.  
  - Provide an estimated processing time to manage user expectations.
  - Optimize database queries for faster response times.

- **Security:**  
  - Server-side OAuth 2.0 implementation.
  - HTTPS with properly configured TLS.
  - HTTP-only session cookies.
  - CSRF protection for all state-changing operations.
  - Input validation and sanitization across all endpoints.
  - Secure payment processing via PayPal's SDK.
  - Rate limiting to prevent abuse.
  - Helmet for secure HTTP headers.
  - Parameterized queries to prevent SQL injection.

- **Scalability:**  
  - Though the initial request volume is low, design the system with potential scale in mind.
  - Database connection pooling.
  - Efficient credit transaction handling.

- **Usability:**  
  - Mobile-first, responsive design with a focus on a thematic experience around growing and building.
  - Intuitive credit purchase flow.
  - Color scheme using green and brown tones to reflect outdoor and natural themes.
  - The prompt generation process is abstracted from the user to maintain a cohesive user experience.

- **Reliability:**  
  - Include robust error handling and retry mechanisms for API calls.
  - Transaction integrity for credit purchases.
  - Logging of critical operations for troubleshooting.

---

## 4. System Architecture

### 4.1. High-Level Components

1. **Frontend:**
   - **UI/UX Framework:** Developed using React with TypeScript and responsive design.
   - **Styling:** TailwindCSS with a custom color palette of greens and browns.
   - **Image Capture & Upload Module:** Supports mobile camera integration and file uploads.
   - **User Dashboard:** Displays user history, generated images with associated Amazon affiliate links, and credit balance.
   - **Payment Integration:** Secure PayPal integration for credit purchases.
   - **Thematic Messaging:** Emphasis on the concept of growing and building rather than technical details like prompt generation.

2. **Backend:**
   - **API Gateway:** RESTful API endpoints for handling requests.
   - **Authentication Service:** Server-side Google OAuth 2.0 implementation.
   - **Session Management:** Secure HTTP-only cookies with CSRF protection.
   - **Processing Service:** Manages image uploads, calls the ChatGPT API for prompt synthesis, and interacts with the OpenAI image generation API.
   - **Database:** PostgreSQL for:
     - User data and authentication
     - Credit management
     - Session storage
     - Affiliate link caching
     - Generation history
   - **Payment Service:** Integration with PayPal API for processing payments.
   - **Credit Management:** System to track and manage user credits.
   - **Affiliate Management Module:** Handles dynamic calls to Amazon's affiliate API and caches results.

3. **External Services:**
   - **Google OAuth:** For secure user authentication.
   - **OpenAI ChatGPT API:** For converting renovation options and additional notes into a prompt.
   - **OpenAI Image Generation API:** For generating the renovated image.
   - **PayPal API:** For processing credit purchases.
   - **Amazon Affiliate API:** For product retrieval and affiliate link generation.

### 4.2. Data Flow Diagram

1. **User Flow:**
   - User signs in via Google OAuth → checks credit balance → purchases credits if needed → uploads or captures an image → selects theme and renovation level → enters additional notes → confirms spending a credit.
   - The system provides an estimated processing time.

2. **Backend Flow:**
   - The backend receives the image and options → deducts a credit from the user's balance.
   - ChatGPT API processes inputs in the background to form a single prompt.
   - The image generation API is called with strict guidelines for realistic renovations.
   - Affiliate data is dynamically fetched from Amazon and cached in PostgreSQL.
   - The generated image and affiliate data are stored in user history and returned to the user.

3. **Payment Flow:**
   - User selects a credit package → is directed to PayPal checkout.
   - After successful payment, credits are added to the user's account.
   - Transaction history is recorded in the database.

4. **Display:**
   - Final output shows the renovated image with integrated, clickable Amazon affiliate links.
   - Credit balance is updated and displayed to the user.

---

## 5. Data Model

### 5.1. User Model
- **id:** Unique identifier (from Google OAuth).
- **email:** User's email.
- **name:** User's name.
- **picture:** Profile picture URL.
- **credit_balance:** Number of available credits.
- **created_at / updated_at**

### 5.2. Transaction Model
- **transaction_id:** Unique identifier.
- **user_id:** Foreign key reference to User.
- **amount:** Payment amount.
- **credits_purchased:** Number of credits purchased.
- **payment_provider:** "PayPal" (initially).
- **payment_id:** ID from payment provider.
- **status:** "completed", "pending", "failed".
- **timestamp**

### 5.3. Image Generation Request Model
- **request_id:** Unique identifier.
- **user_id:** Foreign key reference to User.
- **renovation_options:** JSON object containing:
  - theme
  - renovation level
  - additional notes
- **generated_image_url:** URL of the final renovated image.
- **affiliate_links:** JSON mapping product categories to cached Amazon affiliate URLs.
- **status:** "processing", "completed", "failed".
- **created_at / completed_at**

### 5.4. Affiliate Cache Model
- **product_id:** Identifier from Amazon.
- **affiliate_link:** Cached URL.
- **product_data:** JSON with product details.
- **last_updated:** Timestamp of last update.

### 5.5. Session Model
- **sid:** Session ID.
- **sess:** Session data (JSON).
- **expire:** Expiration timestamp.

---

## 6. API Endpoints

### 6.1. Authentication
- **GET /api/auth/google:** Initiates Google OAuth flow.
- **GET /auth/google/callback:** Handles OAuth callbacks.
- **GET /api/auth/me:** Returns current authenticated user info.
- **POST /api/auth/logout:** Ends the session.

### 6.2. Credit Management
- **GET /api/credits/balance:**
  - **Outputs:** Current credit balance.
  
- **POST /api/credits/purchase:**
  - **Inputs:** Package ID (credits amount).
  - **Process:** Creates payment intent with PayPal.
  - **Outputs:** Redirect URL to PayPal checkout.
  
- **GET /api/credits/callback:**
  - **Process:** Handles PayPal payment callback.
  - **Outputs:** Success/failure status.
  
- **GET /api/credits/transactions:**
  - **Outputs:** List of user's credit transactions.

### 6.3. Image Upload and Processing
- **POST /api/images/upload:**  
  - **Inputs:** Multipart form data (image file and renovation options).
  - **Process:** Deducts a credit, initiates prompt generation and image renovation.
  - **Outputs:** Status and request_id, along with an estimated processing time.
  
- **GET /api/images/{request_id}:**
  - **Outputs:** Renovated image URL and affiliate links.

### 6.4. User Dashboard
- **GET /api/user/history:**  
  - **Outputs:** List of past renovation requests.
  
- **GET /api/user/profile:**  
  - **Outputs:** User account details including credit balance.

### 6.5. Affiliate Data
- **GET /api/affiliate/products:**  
  - **Inputs:** Optional filters (e.g., category, price).
  - **Outputs:** List of Amazon products with affiliate links.

---

## 7. User Interface (UI/UX) Design

### 7.1. Color Palette
- **Primary Color:** Deep Green (#2D5F2D) - Representing growth and nature.
- **Secondary Color:** Earth Brown (#8B5A2B) - Representing soil and foundation.
- **Accent Colors:**
  - Light Green (#7CAA7C) - For highlights and success states.
  - Sandy Beige (#D2B48C) - For backgrounds and neutral elements.
  - Terracotta (#CD5C5C) - For calls-to-action and important elements.

### 7.2. Landing Page
- **Theme-Focused Messaging:** Emphasize growing, building, and transformation.
- **Call-to-Action:** Encourages sign-up/login without mentioning prompt generation details.
- **Visual Elements:** Showcase before/after examples using earthy, natural color scheme.

### 7.3. Upload/Capture Screen
- **Elements:**
  - Image upload button with natural, earthy styling.
  - Mobile camera capture integration.
  - Image preview area with garden-themed frame.
  - Credit balance display.

### 7.4. Renovation Options Form
- **Components:**
  - **Theme Dropdown:** Options include "Keep current theme" and other growth/build themed styles.
  - **Renovation Level Selector:** Radio buttons or slider for the renovation intensity.
  - **Notes Text Area:** For additional details.
  - **Credit Cost Indicator:** Clear indication that 1 credit will be used.
  - **Submit Button:** To initiate processing and display an estimated time.

### 7.5. Results Display Page
- **Elements:**
  - Renovated image with integrated Amazon affiliate hotspots.
  - Before/After comparisons, if applicable.
  - Download and share options.
  - Detailed product modals when clicking on affiliate links.
  - "Generate Another" button with credit balance reminder.

### 7.6. User Dashboard
- **Features:**
  - Prominent credit balance display with "Buy Credits" button.
  - Gallery of previously generated images.
  - View detailed renovation history with timestamps and options used.
  - Transaction history section showing credit purchases.
  - Profile management for updating personal information.

### 7.7. Credit Purchase Flow
- **Package Selection:** Visually appealing cards showing credit packages and pricing.
- **PayPal Integration:** Seamless redirect to PayPal with clear return instructions.
- **Confirmation Screen:** Success message with updated credit balance after purchase.

---

## 8. Security & Privacy Considerations

- **Authentication & Data Security:**  
  - Server-side OAuth implementation.
  - HTTP-only cookies for session management.
  - CSRF protection for all state-changing operations.
  - All sensitive data transmitted over HTTPS.
  - Helmet for secure HTTP headers.
  
- **Payment Processing:**
  - No storage of payment details on our servers.
  - Reliance on PayPal's secure infrastructure for payment processing.
  - Encryption of transaction records.
  
- **Image Storage:**  
  - Only store the final, generated images.
  - Discard original uploaded images after processing.
  - Secure access controls on image URLs.
  
- **Legal/Compliance:**  
  - Clear terms of service regarding credit purchases and usage.
  - Privacy policy explaining data handling practices.
  - Compliance with PCI-DSS for payment handling.

---

## 9. Development & Deployment

### 9.1. Tech Stack
- **Frontend:**  
  - Framework: React with TypeScript
  - Styling: TailwindCSS with custom theme
  
- **Backend:**  
  - Server: Node.js (Express) 
  - Database: PostgreSQL
  - Authentication: Server-side Google OAuth 2.0
  - Session Management: express-session with connect-pg-simple
  - Payment Processing: PayPal SDK
  - Security: helmet, express-rate-limit, CSRF protection
  - Image Storage: AWS S3 or similar cloud storage

### 9.2. Infrastructure
- **Web Server:** Node.js with Express behind Nginx
- **Database:** PostgreSQL with connection pooling
- **Caching:** Redis for high-frequency data (optional)
- **Storage:** AWS S3 for image storage
- **CDN:** For serving static assets and images

### 9.3. CI/CD Pipeline
- **Version Control:** Git on GitHub
- **CI/CD Tools:** GitHub Actions for automated testing, builds, and deployments
- **Environment Management:** Separate development, staging, and production environments
- **Secrets Management:** Secure storage of API keys and credentials

---

## 10. Testing Strategy

### 10.1. Unit Testing
- Test backend logic, API endpoints, and prompt processing functions.
- Test frontend components for responsiveness and usability.
- Test credit management and payment processing logic.

### 10.2. Integration Testing
- Full workflow testing: image upload → prompt generation → image generation → affiliate integration.
- Payment flow testing with PayPal sandbox.
- Validate OAuth authentication flows.

### 10.3. Security Testing
- Regular security audits and vulnerability scanning.
- Penetration testing of authentication and payment flows.
- Input validation and sanitization testing.

### 10.4. User Acceptance Testing (UAT)
- Conduct beta tests with a focus on the thematic UX and realistic image outputs.
- Collect feedback on the credit system and payment experience.
- Test across different devices and browsers for consistent experience.

---

## 11. Implementation Plan

### 11.1. Phase 1: Security Enhancements (Completed)
- Convert from client-side to server-side OAuth.
- Implement secure session management.
- Add CSRF protection and other security measures.
- Set up proper database structures.

### 11.2. Phase 2: Credit System and UI Improvements (Current)
- Implement credit system data model and API.
- Integrate PayPal payment processing.
- Apply new color scheme and UI improvements.
- Update user dashboard to display credit information.

### 11.3. Phase 3: Payment and Scaling
- Expand payment options beyond PayPal.
- Optimize database queries and implement caching.
- Set up monitoring and alerting.
- Implement analytics to track usage patterns.

### 11.4. Future Enhancements
- Additional renovation themes and options.
- Subscription model as an alternative to credits.
- Mobile app development.
- Advanced analytics for renovation patterns.

---

## 12. Next Steps & Instructions

1. **Credit System Implementation:**
   - Create database tables for tracking credits and transactions.
   - Implement PayPal SDK integration for checkout flow.
   - Add endpoints for credit management.
   - Update frontend to display and manage credits.

2. **UI Enhancement:**
   - Apply the new green and brown color scheme to all components.
   - Update stylesheets and TailwindCSS configuration.
   - Improve visual feedback during processing.
   - Design credit purchase UI with clear package options.

3. **Testing Focus:**
   - Test payment flows thoroughly using PayPal sandbox.
   - Verify credit deduction logic works correctly.
   - Ensure proper error handling for payment failures.
   - Test UI responsiveness across devices.

4. **Documentation:**
   - Update API documentation to include credit endpoints.
   - Create user guides for the credit system.
   - Document deployment procedures for the enhanced system.

5. **Security Review:**
   - Conduct a security review of payment implementation.
   - Verify proper handling of transactions.
   - Ensure credit balance cannot be manipulated.

This updated document represents the current state of the project and outlines the path forward for implementing the credit system and UI improvements while maintaining the security enhancements already completed.